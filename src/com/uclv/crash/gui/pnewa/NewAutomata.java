/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.uclv.crash.gui.pnewa;

import com.uclv.crash.core.Automata;
import com.uclv.crash.core.SimplifiedTransition;
import com.uclv.crash.core.State;
import com.uclv.crash.gui.AppActions;
import com.uclv.crash.gui.AppStorage;
import com.uclv.crash.gui.partials.EditorActions;
import com.uclv.crash.gui.utils.LayoutUtils;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author Yasiel Cabrera
 */
public final class NewAutomata extends javax.swing.JPanel {

    /**
     * Creates new form NewAutomata
     *
     */
    public NewAutomata() {
        initComponents();
        changeCover(new Init(this));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        banner = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        removeState = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        newState = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        startStateTf = new javax.swing.JTextField();
        finalStatesTf = new javax.swing.JTextField();
        alphabetTf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        statesTa = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        transitionsTa = new javax.swing.JTextArea();
        crearbttn = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        cover = new javax.swing.JPanel();

        banner.setBackground(new java.awt.Color(227, 239, 239));

        jLabel8.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 153, 153));
        jLabel8.setText("Nuevo Automáta");

        javax.swing.GroupLayout bannerLayout = new javax.swing.GroupLayout(banner);
        banner.setLayout(bannerLayout);
        bannerLayout.setHorizontalGroup(
            bannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bannerLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bannerLayout.setVerticalGroup(
            bannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bannerLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel8)
                .addGap(10, 10, 10))
        );

        jPanel1.setBackground(new java.awt.Color(0, 30, 84));

        jPanel2.setBackground(new java.awt.Color(0, 42, 113));

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("S :");

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("∑ :");

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("δ :");

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("S");

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("F :");

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Automata N = (So, F, Σ, S, δ)");

        removeState.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/uclv/crash/gui/img/icons8_Minus_30px.png"))); // NOI18N
        removeState.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeStateMouseClicked(evt);
            }
        });

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/uclv/crash/gui/img/icons8_Minus_30px.png"))); // NOI18N
        jLabel15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/uclv/crash/gui/img/icons8_Minus_30px.png"))); // NOI18N
        jLabel17.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
        });

        newState.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/uclv/crash/gui/img/icons8_Plus_30px.png"))); // NOI18N
        newState.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newStateMouseClicked(evt);
            }
        });

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/uclv/crash/gui/img/icons8_Plus_30px.png"))); // NOI18N
        jLabel18.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/uclv/crash/gui/img/icons8_Reset_30px.png"))); // NOI18N
        jLabel19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/uclv/crash/gui/img/icons8_Plus_30px.png"))); // NOI18N
        jLabel20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("0");

        jLabel22.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText(":");

        startStateTf.setEditable(false);
        startStateTf.setBackground(new java.awt.Color(0, 42, 113));
        startStateTf.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        startStateTf.setForeground(new java.awt.Color(255, 255, 255));
        startStateTf.setText("Estado Inicial");
        startStateTf.setBorder(null);
        startStateTf.setCaretColor(new java.awt.Color(255, 255, 255));

        finalStatesTf.setEditable(false);
        finalStatesTf.setBackground(new java.awt.Color(0, 42, 113));
        finalStatesTf.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        finalStatesTf.setForeground(new java.awt.Color(255, 255, 255));
        finalStatesTf.setText("Conjunto de estados finales");
        finalStatesTf.setBorder(null);
        finalStatesTf.setCaretColor(new java.awt.Color(255, 255, 255));

        alphabetTf.setEditable(false);
        alphabetTf.setBackground(new java.awt.Color(0, 42, 113));
        alphabetTf.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        alphabetTf.setForeground(new java.awt.Color(255, 255, 255));
        alphabetTf.setText("Alfabeto");
        alphabetTf.setBorder(null);
        alphabetTf.setCaretColor(new java.awt.Color(255, 255, 255));

        jScrollPane1.setBorder(null);

        statesTa.setEditable(false);
        statesTa.setBackground(new java.awt.Color(0, 42, 113));
        statesTa.setColumns(20);
        statesTa.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        statesTa.setForeground(new java.awt.Color(255, 255, 255));
        statesTa.setLineWrap(true);
        statesTa.setRows(4);
        statesTa.setTabSize(4);
        statesTa.setText("Conjunto de estados");
        statesTa.setWrapStyleWord(true);
        statesTa.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(statesTa);

        jScrollPane2.setBorder(null);

        transitionsTa.setEditable(false);
        transitionsTa.setBackground(new java.awt.Color(0, 42, 113));
        transitionsTa.setColumns(20);
        transitionsTa.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        transitionsTa.setForeground(new java.awt.Color(255, 255, 255));
        transitionsTa.setLineWrap(true);
        transitionsTa.setRows(4);
        transitionsTa.setTabSize(4);
        transitionsTa.setText("Conjunto de transiciones");
        transitionsTa.setWrapStyleWord(true);
        transitionsTa.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(transitionsTa);

        crearbttn.setBackground(new java.awt.Color(0, 30, 84));
        crearbttn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crearbttnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                crearbttnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                crearbttnMouseExited(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 0, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("CREAR AUTOMATA");

        javax.swing.GroupLayout crearbttnLayout = new javax.swing.GroupLayout(crearbttn);
        crearbttn.setLayout(crearbttnLayout);
        crearbttnLayout.setHorizontalGroup(
            crearbttnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(crearbttnLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );
        crearbttnLayout.setVerticalGroup(
            crearbttnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(crearbttnLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel7)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(finalStatesTf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel20))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(0, 0, 0)
                                                .addComponent(jLabel21)
                                                .addGap(0, 0, 0)
                                                .addComponent(jLabel22)))
                                        .addGap(1, 1, 1))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(removeState)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(newState))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel15)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel18))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(startStateTf)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                            .addComponent(alphabetTf))
                        .addGap(110, 110, 110))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(crearbttn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(startStateTf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)))
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finalStatesTf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(alphabetTf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(removeState, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newState, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(crearbttn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        cover.setBackground(new java.awt.Color(0, 42, 113));
        cover.setPreferredSize(new java.awt.Dimension(300, 0));

        javax.swing.GroupLayout coverLayout = new javax.swing.GroupLayout(cover);
        cover.setLayout(coverLayout);
        coverLayout.setHorizontalGroup(
            coverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        coverLayout.setVerticalGroup(
            coverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(27, 27, 27)
                .addComponent(cover, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cover, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(banner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(banner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newStateMouseClicked
        changeCover(new NewState(this));
    }//GEN-LAST:event_newStateMouseClicked

    private void removeStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeStateMouseClicked
        changeCover(new RemoveState(this));
    }//GEN-LAST:event_removeStateMouseClicked

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        changeCover(new NewInicial(this));
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        changeCover(new NewFinal(this));
    }//GEN-LAST:event_jLabel20MouseClicked

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
        changeCover(new NewTransition(this));
    }//GEN-LAST:event_jLabel18MouseClicked

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        changeCover(new RemoveFinal(this));
    }//GEN-LAST:event_jLabel17MouseClicked

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        changeCover(new RemoveTransition(this));
    }//GEN-LAST:event_jLabel15MouseClicked

    private void crearbttnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crearbttnMouseClicked
        if (inicial == Integer.MIN_VALUE || finalStates.isEmpty()) {
            changeCover(new Errors(this));
        } else {
            Automata a = buidAutomata();

            AppStorage.setRegularExpresion(null);
            AppStorage.setAfnd(null);
            AppStorage.setAfd(null);
            AppStorage.setAfdmin(null);
            if (a.isDeterministic()) {
                AppStorage.setAfd(a);
                EditorActions.afdOnClickActions();
            } else {
                AppStorage.setAfnd(a);
                EditorActions.afndOnClickActions();
            }

            //show work editor
            AppActions.showWorkSpace();
        }
    }//GEN-LAST:event_crearbttnMouseClicked

    private void crearbttnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crearbttnMouseEntered
        crearbttn.setBackground(new Color(0, 34, 96));
    }//GEN-LAST:event_crearbttnMouseEntered

    private void crearbttnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crearbttnMouseExited
        crearbttn.setBackground(new Color(0, 30, 84));
    }//GEN-LAST:event_crearbttnMouseExited

    public Automata buidAutomata() {
        if(states.isEmpty()) return null;
        Automata a = new Automata();
        states.stream().forEach((i) -> {
            a.addState(i);
        });
        a.setStartState(inicial);

        finalStates.stream().forEach((i) -> {
            a.addFinalState(i);
        });

        transiciones.stream().forEach((t) -> {
            a.addTransition(t.from, t.to, t.input);
        });
        return a;
    }
    private List<Integer> states = new ArrayList<>();
    private List<Trans> transiciones = new ArrayList<>();
    private int inicial = Integer.MIN_VALUE;
    private List<Integer> finalStates = new ArrayList<>();

    /**
     * Adiciona un nuevo estado, puede añadirse ademas como un estado inicioa
     * y/o final
     *
     * @param id identificador del nuevo estado
     * @param inicial si es true se pone el estado como estado inicial
     * @param fin si es true se adiciona el estado al conjunto de estados
     * finales
     * @return 1 el estado existe, 0 todo paso normalmente.
     */
    public int addState(int id, boolean inicial, boolean fin) {
        if (!states.contains(id)) {
            states.add(id);
        } else {
            return 1;
        }
        if (inicial) {
            this.inicial = id;
        }
        if (fin && !finalStates.contains(id)) {
            finalStates.add(id);
        }
        updateAutomataData();
        return 0;
    }

    /**
     * pone un nuevo estado inicial, si no existe en el conjunto de estados se
     * adiciona
     *
     * @param id identificador del estado
     */
    public void addStart(int id) {
        if (!states.contains(id)) {
            states.add(id);
        }
        inicial = id;
        updateAutomataData();
    }

    /**
     * Añade un nuevo estado final, si no existe en el conjunto de estado se
     * adiciona
     *
     * @param id identificador del estado
     */
    public void addFinal(int id) {
        if (!states.contains(id)) {
            states.add(id);
        }
        if (!finalStates.contains(id)) {
            finalStates.add(id);
        }
        updateAutomataData();
    }

    /**
     * Adiciona una nueva transicion, si es estado from o to no existen, se
     * crean
     *
     * @param from Desde donde parte pa transicion
     * @param to Estado destino de la transicion
     * @param input simbolo de la transicion
     */
    public void addTransition(int from, int to, char input) {
        if (!states.contains(from)) {
            states.add(from);
        }
        if (!states.contains(to)) {
            states.add(to);
        }
        Trans t = new Trans(from, to, input);
        if (!transiciones.contains(t)) {
            transiciones.add(t);
        }
        updateAutomataData();
    }

    /**
     * Elimina el estado final y todas las apariciones de esta en caso de
     * existir
     *
     * @param id identificador del estado a eliminar
     * @return true si se elimino, false en caso de que no exista
     */
    public boolean removeFinal(Integer id) {
        if (finalStates.contains(id)) {
            finalStates.remove(id);
            states.remove(id);
            for (int i = transiciones.size() - 1; i >= 0; i--) {
                if (transiciones.get(i).from == id || transiciones.get(i).to == id) {
                    transiciones.remove(i);
                }
            }
            if (inicial == id) {
                inicial = Integer.MIN_VALUE;
            }
            updateAutomataData();
            return true;
        } else {
            return false;
        }
    }

    /**
     * Elimina un estado y todas las apariciones de esta en caso de existir
     *
     * @param id identificador del estado
     * @return true si se elimino, false en caso de que no exista.
     */
    public boolean removeState(Integer id) {
        if (states.contains(id)) {
            finalStates.remove(id);
            states.remove(id);
            for (int i = transiciones.size() - 1; i >= 0; i--) {
                if (transiciones.get(i).from == id || transiciones.get(i).to == id) {
                    transiciones.remove(i);
                }
            }
            if (inicial == id) {
                inicial = Integer.MIN_VALUE;
            }
            updateAutomataData();
            return true;
        } else {
            return false;
        }
    }

    /**
     * Elimina, en caso de existir la transicion con los datos pasados por
     * parametro.
     *
     * @param from identificador del estado desde donde parte
     * @param to identificador del estado a donde llega
     * @param input simbolo de la transicion
     * @return true si se elimino, false en caso contrario. Si es false
     * significa que no existe tal transicion.
     */
    public boolean removeTransition(int from, int to, char input) {
        boolean r = transiciones.remove(new Trans(from, to, input));
        if (r) {
            updateAutomataData();
        }
        return r;
    }

    /**
     * Actualiza los campos visuales con los datos que hay del automata hasta el
     * momento
     */
    public void updateAutomataData() {
        if (states.isEmpty()) {
            statesTa.setText("Conjunto de estados");
        } else {
            String c = "{";
            for (int i = 0; i < states.size(); i++) {
                if (i != 0) {
                    c += ", ";
                }
                c += states.get(i);
            }
            c += "}";
            statesTa.setText(c);
        }
        String tr = "";
        int na = 0;
        for (Trans t : transiciones) {
            if (!tr.contains(t.input + "") && t.input != SimplifiedTransition.EMPTY_INPUT) {
                tr += (na == 0 ? "" : ", ") + t.input;
                na++;
            }
        }
        if (na == 0) {
            alphabetTf.setText("Alfabeto");
        } else {
            alphabetTf.setText("{" + tr + "}");
        }
        if (transiciones.isEmpty()) {
            transitionsTa.setText("Conjunto de transiciones");
        } else {
            String c = "[ ";
            for (int i = 0; i < transiciones.size(); i++) {
                if (i != 0) {
                    c += ", ";
                }
                Trans t = transiciones.get(i);
                c += "{(" + t.from + ", " + (t.input == SimplifiedTransition.EMPTY_INPUT ? "Ɛ" : "'"+t.input+"'") + ")->" + t.to + "}";
            }
            c += " ]";
            transitionsTa.setText(c);
        }
        if (inicial == Integer.MIN_VALUE) {
            startStateTf.setText("Estado Inicial");
        } else {
            startStateTf.setText("{" + inicial + "}");
        }
        if (finalStates.isEmpty()) {
            finalStatesTf.setText("Conjunto de estados finales");
        } else {
            String c = "{";
            for (int i = 0; i < finalStates.size(); i++) {
                if (i != 0) {
                    c += ", ";
                }
                c += finalStates.get(i);
            }
            c += "}";
            finalStatesTf.setText(c);
        }
    }

    private class Trans {

        public int from;
        public int to;
        public char input;

        public Trans(int from, int to, char input) {
            this.from = from;
            this.to = to;
            this.input = input;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj instanceof Trans) {
                Trans t = (Trans) obj;
                return from == t.from && to == t.to && input == t.input;
            }
            return false;
        }

    }

    public void changeCover(JPanel panel) {
        LayoutUtils.setPanelInto(cover, panel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alphabetTf;
    private javax.swing.JPanel banner;
    private javax.swing.JPanel cover;
    private javax.swing.JPanel crearbttn;
    private javax.swing.JTextField finalStatesTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel newState;
    private javax.swing.JLabel removeState;
    private javax.swing.JTextField startStateTf;
    private javax.swing.JTextArea statesTa;
    private javax.swing.JTextArea transitionsTa;
    // End of variables declaration//GEN-END:variables
}
